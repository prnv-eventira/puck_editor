{"version":3,"sources":["src/core/plugins/utilities.ts","src/core/plugins/plugin.ts","src/core/plugins/registry.ts","src/core/collision/utilities.ts","src/core/collision/observer.ts","src/core/manager/events.ts","src/core/collision/notifier.ts","src/core/collision/types.ts","src/core/manager/status.ts","src/core/manager/actions.ts","src/core/entities/entity/entity.ts","src/core/entities/entity/registry.ts","src/core/entities/draggable/draggable.ts","src/core/entities/droppable/droppable.ts","src/core/sensors/sensor.ts","src/core/modifiers/modifier.ts","src/core/manager/registry.ts","src/core/manager/operation.ts","src/core/manager/renderer.ts","src/core/manager/manager.ts"],"names":["descriptor","untracked","effects","CollisionPriority","CollisionType","_init","reactive","_a","_b","_c","effect","_disabled_dec","_disabled","id","manager","signal","cleanup","derived","_type_dec","_type","_modifiers_dec","_shape_dec","_manager","_shape","_modifiers","batch"],"mappings":"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","file":"index.js","sourcesContent":["import type {\n  PluginConstructor,\n  PluginOptions,\n  PluginDescriptor,\n  InferPluginOptions,\n} from './types.ts';\n\n/**\n * Creates a plugin descriptor with the given plugin constructor and options.\n *\n * @template T - The plugin constructor type\n * @template V - The plugin options type\n * @param plugin - The plugin constructor\n * @param options - The plugin configuration options\n * @returns A plugin descriptor containing the constructor and options\n */\nexport function configure<\n  T extends PluginConstructor<any, any, any>,\n  V extends PluginOptions = InferPluginOptions<T>,\n>(plugin: T, options: V): PluginDescriptor<any, any, T> {\n  return {\n    plugin,\n    options,\n  };\n}\n\n/**\n * Creates a configurator function for a specific plugin constructor.\n *\n * @template T - The plugin constructor type\n * @param plugin - The plugin constructor to configure\n * @returns A function that takes options and returns a plugin descriptor\n */\nexport function configurator<T extends PluginConstructor<any, any, any>>(\n  plugin: T\n) {\n  return (options: InferPluginOptions<T>): PluginDescriptor<any, any, T> => {\n    return configure(plugin, options);\n  };\n}\n\n/**\n * Normalizes a plugin constructor or descriptor into a descriptor.\n *\n * @template T - The plugin constructor type\n * @param plugin - Either a plugin constructor or a plugin descriptor\n * @returns A plugin descriptor\n */\nexport function descriptor<T extends PluginConstructor<any, any, any>>(\n  plugin: T | PluginDescriptor<any, any, T>\n): PluginDescriptor<any, any, T> {\n  if (typeof plugin === 'function') {\n    return {\n      plugin,\n      options: undefined,\n    };\n  }\n\n  return plugin;\n}\n","import {\n  type CleanupFunction,\n  effect,\n  reactive,\n  untracked,\n} from '@dnd-kit/state';\n\nimport type {DragDropManager} from '../manager/index.ts';\nimport type {PluginOptions} from './types.ts';\nimport {configure} from './utilities.ts';\n\n/**\n * Base class for plugins that extend drag and drop functionality.\n *\n * @template T - The type of drag and drop manager\n * @template U - The type of plugin options\n *\n * @remarks\n * Plugins can add new features and behaviors to the drag and drop system\n * by extending this class and implementing custom functionality.\n */\nexport abstract class Plugin<\n  T extends DragDropManager<any, any> = DragDropManager<any, any>,\n  U extends PluginOptions = PluginOptions,\n> {\n  /**\n   * Creates a new plugin instance.\n   *\n   * @param manager - The drag and drop manager that owns this plugin\n   * @param options - Optional configuration for the plugin\n   */\n  constructor(\n    public manager: T,\n    public options?: U\n  ) {}\n\n  /**\n   * Whether the plugin instance is disabled.\n   *\n   * @remarks\n   * This property is reactive and triggers effects when accessed.\n   */\n  @reactive\n  public accessor disabled: boolean = false;\n\n  /**\n   * Enables a disabled plugin instance.\n   *\n   * @remarks\n   * This method triggers effects when called.\n   */\n  public enable() {\n    this.disabled = false;\n  }\n\n  /**\n   * Disables an enabled plugin instance.\n   *\n   * @remarks\n   * This method triggers effects when called.\n   */\n  public disable() {\n    this.disabled = true;\n  }\n\n  /**\n   * Checks if the plugin instance is disabled.\n   *\n   * @returns true if the plugin is disabled\n   * @remarks\n   * This method does not trigger effects when accessed.\n   */\n  public isDisabled() {\n    return untracked(() => {\n      return this.disabled;\n    });\n  }\n\n  /**\n   * Configures a plugin instance with new options.\n   *\n   * @param options - The new options to apply\n   */\n  public configure(options?: U) {\n    this.options = options;\n  }\n\n  #cleanupFunctions = new Set<CleanupFunction>();\n\n  /**\n   * Registers an effect that will be cleaned up when the plugin is destroyed.\n   *\n   * @param callback - The effect callback to register\n   * @returns A function to dispose of the effect\n   */\n  protected registerEffect(callback: () => void) {\n    const dispose = effect(callback.bind(this));\n\n    this.#cleanupFunctions.add(dispose);\n\n    return dispose;\n  }\n\n  /**\n   * Destroys a plugin instance and cleans up its resources.\n   *\n   * @remarks\n   * This method:\n   * - Calls all registered cleanup functions\n   * - Should be overridden by subclasses to clean up additional resources\n   */\n  public destroy() {\n    this.#cleanupFunctions.forEach((cleanup) => cleanup());\n  }\n\n  /**\n   * Configures a plugin constructor with options.\n   *\n   * @param options - The options to configure the constructor with\n   * @returns The configured plugin constructor\n   *\n   * @remarks\n   * This method is used to configure the options that the\n   * plugin constructor will use to create plugin instances.\n   */\n  static configure(options: PluginOptions) {\n    return configure(this as any, options);\n  }\n}\n\n/**\n * Base class for core plugins that ship with the library.\n *\n * @template T - The type of drag and drop manager\n * @template U - The type of plugin options\n */\nexport class CorePlugin<\n  T extends DragDropManager<any, any> = DragDropManager<any, any>,\n  U extends PluginOptions = PluginOptions,\n> extends Plugin<T, U> {}\n","import {DragDropManager} from '../manager/index.ts';\nimport {CorePlugin, type Plugin} from './plugin.ts';\nimport type {\n  InferPluginOptions,\n  PluginDescriptor,\n  PluginConstructor,\n  Plugins,\n} from './types.ts';\nimport {descriptor} from './utilities.ts';\n\n/**\n * Manages the registration and lifecycle of plugin instances.\n *\n * @template T - The type of drag and drop manager\n * @template W - The type of plugin constructor\n * @template U - The type of plugin instance\n */\nexport class PluginRegistry<\n  T extends DragDropManager<any, any>,\n  W extends PluginConstructor<T> = PluginConstructor<T>,\n  U extends Plugin<T> = InstanceType<W>,\n> {\n  private instances: Map<W, U> = new Map();\n\n  /**\n   * Creates a new plugin registry.\n   *\n   * @param manager - The drag and drop manager that owns this registry\n   */\n  constructor(private manager: T) {}\n\n  /**\n   * Gets all registered plugin instances.\n   *\n   * @returns An array of all active plugin instances\n   */\n  public get values(): U[] {\n    return Array.from(this.instances.values());\n  }\n\n  #previousValues: PluginConstructor<T>[] = [];\n\n  /**\n   * Sets the list of plugins to be used by the registry.\n   *\n   * @param entries - Array of plugin constructors or descriptors\n   * @remarks\n   * This method:\n   * - Filters out duplicate plugins\n   * - Unregisters plugins that are no longer in use\n   * - Registers new plugins with their options\n   */\n  public set values(entries: Plugins<T>) {\n    const descriptors = entries\n      .map(descriptor)\n      .reduceRight<PluginDescriptor<T>[]>((acc, descriptor) => {\n        if (acc.some(({plugin}) => plugin === descriptor.plugin)) {\n          // Filter out duplicate plugins\n          return acc;\n        }\n\n        return [descriptor, ...acc];\n      }, []);\n    const constructors = descriptors.map(({plugin}) => plugin);\n\n    for (const plugin of this.#previousValues) {\n      if (!constructors.includes(plugin)) {\n        if (plugin.prototype instanceof CorePlugin) {\n          continue;\n        }\n\n        this.unregister(plugin as W);\n      }\n    }\n\n    for (const {plugin, options} of descriptors) {\n      this.register(plugin as W, options as InferPluginOptions<W>);\n    }\n\n    this.#previousValues = constructors;\n  }\n\n  /**\n   * Gets a plugin instance by its constructor.\n   *\n   * @param plugin - The plugin constructor to look up\n   * @returns The plugin instance or undefined if not found\n   */\n  public get<X extends W>(plugin: X): InstanceType<X> | undefined {\n    const instance = this.instances.get(plugin);\n\n    return instance as any;\n  }\n\n  /**\n   * Registers a new plugin instance.\n   *\n   * @param plugin - The plugin constructor to register\n   * @param options - Optional configuration for the plugin\n   * @returns The registered plugin instance\n   * @remarks\n   * If the plugin is already registered, its options will be updated\n   * and the existing instance will be returned.\n   */\n  public register<X extends W>(\n    plugin: X,\n    options?: InferPluginOptions<X>\n  ): InstanceType<X> {\n    const existingInstance = this.instances.get(plugin);\n\n    if (existingInstance) {\n      if (existingInstance.options !== options) {\n        existingInstance.options = options;\n      }\n\n      return existingInstance as InstanceType<X>;\n    }\n\n    const instance = new plugin(this.manager, options) as U;\n\n    this.instances.set(plugin, instance);\n\n    return instance as InstanceType<X>;\n  }\n\n  /**\n   * Unregisters a plugin instance.\n   *\n   * @param plugin - The plugin constructor to unregister\n   * @remarks\n   * This method:\n   * - Destroys the plugin instance\n   * - Removes it from the registry\n   */\n  public unregister<X extends W>(plugin: X) {\n    const instance = this.instances.get(plugin);\n\n    if (instance) {\n      instance.destroy();\n      this.instances.delete(plugin);\n    }\n  }\n\n  /**\n   * Destroys all registered plugin instances.\n   *\n   * @remarks\n   * This method:\n   * - Calls destroy() on all plugin instances\n   * - Clears the registry\n   */\n  public destroy() {\n    for (const plugin of this.instances.values()) {\n      plugin.destroy();\n    }\n\n    this.instances.clear();\n  }\n}\n","import {Collision} from './types.ts';\n\n/**\n * Sort collisions from greatest to smallest priority\n * Collisions of equal priority are sorted from greatest to smallest value\n */\nexport function sortCollisions(a: Collision, b: Collision) {\n  if (a.priority === b.priority) {\n    if (a.type === b.type) {\n      return b.value - a.value;\n    }\n\n    return b.type - a.type;\n  }\n\n  return b.priority - a.priority;\n}\n","import {signal, untracked, type Signal, effects} from '@dnd-kit/state';\nimport type {Coordinates} from '@dnd-kit/geometry';\n\nimport type {DragDropManager} from '../manager/index.ts';\nimport type {Draggable, Droppable} from '../entities/index.ts';\nimport {Plugin} from '../plugins/index.ts';\nimport type {Collision, CollisionDetector, Collisions} from './types.ts';\nimport {sortCollisions} from './utilities.ts';\n\nconst DEFAULT_VALUE: Collisions = [];\n\n/**\n * Observes and manages collision detection between draggable and droppable elements.\n *\n * @template T - The type of draggable entities\n * @template U - The type of droppable entities\n * @template V - The type of drag drop manager\n *\n * @remarks\n * The CollisionObserver is responsible for:\n * - Computing collisions between draggable and droppable elements\n * - Maintaining a signal of current collisions\n * - Updating collision state based on drag operation changes\n */\nexport class CollisionObserver<\n  T extends Draggable = Draggable,\n  U extends Droppable = Droppable,\n  V extends DragDropManager<T, U> = DragDropManager<T, U>,\n> extends Plugin<V> {\n  /**\n   * Creates a new CollisionObserver instance.\n   *\n   * @param manager - The drag drop manager instance\n   */\n  constructor(manager: V) {\n    super(manager);\n\n    this.computeCollisions = this.computeCollisions.bind(this);\n    this.#collisions = signal(DEFAULT_VALUE);\n\n    this.destroy = effects(\n      () => {\n        const collisions = this.computeCollisions();\n        const coordinates = untracked(\n          () => this.manager.dragOperation.position.current\n        );\n\n        if (collisions !== DEFAULT_VALUE) {\n          const previousCoordinates = this.#previousCoordinates;\n          this.#previousCoordinates = coordinates;\n\n          if (\n            previousCoordinates &&\n            coordinates.x == previousCoordinates.x &&\n            coordinates.y == previousCoordinates.y\n          ) {\n            return;\n          }\n        } else {\n          this.#previousCoordinates = undefined;\n        }\n\n        this.#collisions.value = collisions;\n      },\n      () => {\n        const {dragOperation} = this.manager;\n\n        if (dragOperation.status.initialized) {\n          this.forceUpdate();\n        }\n      }\n    );\n  }\n\n  #previousCoordinates: Coordinates | undefined;\n\n  /**\n   * Forces an immediate update of collision detection.\n   *\n   * @param immediate - If true, updates collisions immediately. If false, resets previous coordinates.\n   */\n  public forceUpdate(immediate = true) {\n    untracked(() => {\n      if (immediate) {\n        this.#collisions.value = this.computeCollisions();\n      } else {\n        this.#previousCoordinates = undefined;\n      }\n    });\n  }\n\n  /**\n   * Computes collisions between draggable and droppable elements.\n   *\n   * @param entries - Optional array of droppable elements to check. If not provided, uses all registered droppables.\n   * @param collisionDetector - Optional custom collision detector function\n   * @returns Array of detected collisions, sorted by priority\n   */\n  public computeCollisions(\n    entries?: Droppable[],\n    collisionDetector?: CollisionDetector\n  ) {\n    const {registry, dragOperation} = this.manager;\n    const {source, shape, status} = dragOperation;\n\n    if (!status.initialized || !shape) {\n      return DEFAULT_VALUE;\n    }\n\n    const collisions: Collision[] = [];\n    const potentialTargets = [];\n\n    for (const entry of entries ?? registry.droppables) {\n      if (entry.disabled) {\n        continue;\n      }\n\n      if (source && !entry.accepts(source)) {\n        continue;\n      }\n\n      const detectCollision = collisionDetector ?? entry.collisionDetector;\n\n      if (!detectCollision) {\n        continue;\n      }\n\n      potentialTargets.push(entry);\n\n      // Force collisions to be recomputed when the shape changes\n      void entry.shape;\n\n      const collision = untracked(() =>\n        detectCollision({\n          droppable: entry,\n          dragOperation,\n        })\n      );\n\n      if (collision) {\n        if (entry.collisionPriority != null) {\n          collision.priority = entry.collisionPriority;\n        }\n\n        collisions.push(collision);\n      }\n    }\n\n    if (potentialTargets.length === 0) {\n      return DEFAULT_VALUE;\n    }\n\n    collisions.sort(sortCollisions);\n\n    return collisions;\n  }\n\n  /**\n   * Gets the current collisions signal value.\n   */\n  public get collisions() {\n    return this.#collisions.value;\n  }\n\n  #collisions: Signal<Collisions>;\n}\n","import type {Coordinates} from '@dnd-kit/geometry';\n\nimport type {Draggable, Droppable} from '../entities/index.ts';\nimport type {Collisions} from '../collision/index.ts';\nimport type {DragDropManager} from './manager.ts';\nimport type {DragOperationSnapshot} from './operation.ts';\n\n/** Base type for event handler functions */\nexport type Events = Record<string, (...args: any[]) => void>;\n\n/**\n * Extends an event type with preventable functionality.\n *\n * @template T - The base event type\n */\nexport type Preventable<T> = T & {\n  /** Whether the event can be canceled */\n  cancelable: boolean;\n  /** Whether the default action was prevented */\n  defaultPrevented: boolean;\n  /** Prevents the default action of the event */\n  preventDefault(): void;\n};\n\n/**\n * Base class for event monitoring and dispatching.\n *\n * @template T - The type of events to monitor\n */\nclass Monitor<T extends Events> {\n  private registry = new Map<keyof T, Set<T[keyof T]>>();\n\n  /**\n   * Adds an event listener for the specified event type.\n   *\n   * @param name - The name of the event to listen for\n   * @param handler - The function to call when the event occurs\n   * @returns A function to remove the event listener\n   */\n  public addEventListener<U extends keyof T>(name: U, handler: T[U]) {\n    const {registry} = this;\n    const listeners = new Set(registry.get(name));\n\n    listeners.add(handler);\n    registry.set(name, listeners);\n\n    return () => this.removeEventListener(name, handler);\n  }\n\n  /**\n   * Removes an event listener for the specified event type.\n   *\n   * @param name - The name of the event\n   * @param handler - The function to remove\n   */\n  public removeEventListener(name: keyof T, handler: T[keyof T]) {\n    const {registry} = this;\n    const listeners = new Set(registry.get(name));\n\n    listeners.delete(handler);\n    registry.set(name, listeners);\n  }\n\n  /**\n   * Dispatches an event to all registered listeners.\n   *\n   * @param name - The name of the event to dispatch\n   * @param args - Arguments to pass to the event handlers\n   */\n  protected dispatch<U extends keyof T>(name: U, ...args: any[]) {\n    const {registry} = this;\n    const listeners = registry.get(name);\n\n    if (!listeners) {\n      return;\n    }\n\n    for (const listener of listeners) {\n      listener(...args);\n    }\n  }\n}\n\n/**\n * Type definition for drag and drop events.\n *\n * @template T - The type of draggable entities\n * @template U - The type of droppable entities\n * @template V - The type of drag and drop manager\n */\nexport type DragDropEvents<\n  T extends Draggable,\n  U extends Droppable,\n  V extends DragDropManager<T, U>,\n> = {\n  /** Event fired when collisions are detected */\n  collision(\n    event: Preventable<{\n      collisions: Collisions;\n    }>,\n    manager: V\n  ): void;\n  /** Event fired before a drag operation starts */\n  beforedragstart(\n    event: Preventable<{\n      operation: DragOperationSnapshot<T, U>;\n      nativeEvent?: Event;\n    }>,\n    manager: V\n  ): void;\n  /** Event fired when a drag operation starts */\n  dragstart(\n    event: {\n      cancelable: false;\n      operation: DragOperationSnapshot<T, U>;\n      nativeEvent?: Event;\n    },\n    manager: V\n  ): void;\n  /** Event fired when a drag operation moves */\n  dragmove(\n    event: Preventable<{\n      operation: DragOperationSnapshot<T, U>;\n      to?: Coordinates;\n      by?: Coordinates;\n      nativeEvent?: Event;\n    }>,\n    manager: V\n  ): void;\n  /** Event fired when a drag operation hovers over a droppable */\n  dragover(\n    event: Preventable<{\n      operation: DragOperationSnapshot<T, U>;\n    }>,\n    manager: V\n  ): void;\n  /** Event fired when a drag operation ends */\n  dragend(\n    event: {\n      operation: DragOperationSnapshot<T, U>;\n      nativeEvent?: Event;\n      canceled: boolean;\n      suspend(): {resume(): void; abort(): void};\n    },\n    manager: V\n  ): void;\n};\n\n/**\n * Monitors and dispatches drag and drop events.\n *\n * @template T - The type of draggable entities\n * @template U - The type of droppable entities\n * @template V - The type of drag and drop manager\n */\nexport class DragDropMonitor<\n  T extends Draggable,\n  U extends Droppable,\n  V extends DragDropManager<T, U>,\n> extends Monitor<DragDropEvents<T, U, V>> {\n  /**\n   * Creates a new drag and drop monitor.\n   *\n   * @param manager - The drag and drop manager to monitor\n   */\n  constructor(private manager: V) {\n    super();\n  }\n\n  /**\n   * Dispatches a drag and drop event.\n   *\n   * @param type - The type of event to dispatch\n   * @param event - The event data to dispatch\n   */\n  public dispatch<Key extends keyof DragDropEvents<T, U, V>>(\n    type: Key,\n    event: Parameters<DragDropEvents<T, U, V>[Key]>[0]\n  ) {\n    const args = [event, this.manager] as any;\n\n    super.dispatch(type, ...args);\n  }\n}\n\n/**\n * Creates a preventable event object.\n *\n * @param event - The base event object\n * @param cancelable - Whether the event can be canceled\n * @returns A preventable event object\n */\nexport function defaultPreventable<T>(\n  event: T,\n  cancelable = true\n): Preventable<T> {\n  let defaultPrevented = false;\n\n  return {\n    ...event,\n    cancelable,\n    get defaultPrevented() {\n      return defaultPrevented;\n    },\n    preventDefault() {\n      if (!cancelable) {\n        return;\n      }\n\n      defaultPrevented = true;\n    },\n  };\n}\n","import {effect, effects, untracked} from '@dnd-kit/state';\n\nimport {DragDropManager} from '../manager/index.ts';\nimport {CorePlugin} from '../plugins/index.ts';\nimport {defaultPreventable} from '../manager/events.ts';\n\nimport type {Collision} from './types.ts';\n\nexport class CollisionNotifier extends CorePlugin {\n  constructor(manager: DragDropManager<any, any>) {\n    super(manager);\n\n    const isEqual = (a: Collision[], b: Collision[]) =>\n      a.map(({id}) => id).join('') === b.map(({id}) => id).join('');\n\n    let previousCollisions: Collision[] = [];\n\n    this.destroy = effects(\n      () => {\n        const {dragOperation, collisionObserver} = manager;\n\n        if (dragOperation.status.initializing) {\n          previousCollisions = [];\n          collisionObserver.enable();\n        }\n      },\n      () => {\n        const {collisionObserver, monitor} = manager;\n        const {collisions} = collisionObserver;\n\n        if (collisionObserver.isDisabled()) {\n          return;\n        }\n\n        const event = defaultPreventable({\n          collisions,\n        });\n\n        monitor.dispatch('collision', event);\n\n        if (event.defaultPrevented) {\n          return;\n        }\n\n        if (isEqual(collisions, previousCollisions)) {\n          return;\n        } else {\n          previousCollisions = collisions;\n        }\n\n        const [firstCollision] = collisions;\n\n        untracked(() => {\n          if (firstCollision?.id !== manager.dragOperation.target?.id) {\n            collisionObserver.disable();\n\n            manager.actions.setDropTarget(firstCollision?.id).then(() => {\n              collisionObserver.enable();\n            });\n          }\n        });\n      }\n    );\n  }\n}\n","import type {DragOperation} from '../manager/index.ts';\nimport type {\n  Draggable,\n  Droppable,\n  UniqueIdentifier,\n} from '../entities/index.ts';\n\n/**\n * Priority levels for collision detection.\n *\n * @remarks\n * Higher priority collisions take precedence over lower priority ones.\n * Custom numeric priorities can also be used for fine-grained control.\n */\nexport enum CollisionPriority {\n  /** Lowest priority level */\n  Lowest,\n  /** Low priority level */\n  Low,\n  /** Normal priority level */\n  Normal,\n  /** High priority level */\n  High,\n  /** Highest priority level */\n  Highest,\n}\n\n/**\n * Types of collision detection.\n *\n * @remarks\n * Different collision types can be used to implement various\n * drag and drop behaviors and visual feedback.\n */\nexport enum CollisionType {\n  /** Basic collision detection */\n  Collision,\n  /** Shape-based intersection detection */\n  ShapeIntersection,\n  /** Pointer-based intersection detection */\n  PointerIntersection,\n}\n\n/**\n * Represents a detected collision between a draggable and droppable.\n *\n * @remarks\n * Contains information about the collision type, priority, and\n * additional data that can be used for custom behaviors.\n */\nexport interface Collision {\n  /** Unique identifier of the droppable involved in the collision */\n  id: UniqueIdentifier;\n  /** Priority of the collision */\n  priority: CollisionPriority | number;\n  /** Type of collision detected */\n  type: CollisionType;\n  /** Numeric value representing the collision strength or overlap */\n  value: number;\n  /** Additional data associated with the collision */\n  data?: Record<string, any>;\n}\n\n/** Array of detected collisions */\nexport type Collisions = Collision[];\n\n/**\n * Input for collision detection functions.\n *\n * @template T - The type of draggable entities\n * @template U - The type of droppable entities\n */\nexport interface CollisionDetectorInput<\n  T extends Draggable = Draggable,\n  U extends Droppable = Droppable,\n> {\n  /** The droppable to check for collisions */\n  droppable: U;\n  /** The current drag operation state */\n  dragOperation: DragOperation<T, U>;\n}\n\n/**\n * Function type for detecting collisions between draggables and droppables.\n *\n * @template T - The type of draggable entities\n * @template U - The type of droppable entities\n * @param input - The collision detection input\n * @returns A collision object if detected, null otherwise\n */\nexport type CollisionDetector = <\n  T extends Draggable = Draggable,\n  U extends Droppable = Droppable,\n>(\n  input: CollisionDetectorInput<T, U>\n) => Collision | null;\n","import {derived, reactive} from '@dnd-kit/state';\n\n/**\n * Enum representing the possible states of a drag operation.\n */\nexport enum StatusValue {\n  /** No drag operation is in progress */\n  Idle = 'idle',\n  /** A drag operation is about to start */\n  InitializationPending = 'initialization-pending',\n  /** A drag operation is being initialized */\n  Initializing = 'initializing',\n  /** A drag operation is in progress */\n  Dragging = 'dragging',\n  /** A drag operation has completed */\n  Dropped = 'dropped',\n}\n\n/**\n * Manages the status of a drag operation.\n *\n * @remarks\n * This class provides reactive accessors for checking the current state\n * of a drag operation and methods for updating it.\n */\nexport class Status {\n  /** The current status value */\n  @reactive\n  private accessor value: StatusValue = StatusValue.Idle;\n\n  /**\n   * Gets the current status value.\n   *\n   * @returns The current status value\n   */\n  @derived\n  public get current(): StatusValue {\n    return this.value;\n  }\n\n  /**\n   * Checks if the status is idle.\n   *\n   * @returns true if no drag operation is in progress\n   */\n  @derived\n  public get idle(): boolean {\n    return this.value === StatusValue.Idle;\n  }\n\n  /**\n   * Checks if the status is initializing.\n   *\n   * @returns true if a drag operation is being initialized\n   */\n  @derived\n  public get initializing(): boolean {\n    return this.value === StatusValue.Initializing;\n  }\n\n  /**\n   * Checks if the status is initialized.\n   *\n   * @returns true if a drag operation has started initialization\n   */\n  @derived\n  public get initialized(): boolean {\n    const {value} = this;\n\n    return (\n      value !== StatusValue.Idle && value !== StatusValue.InitializationPending\n    );\n  }\n\n  /**\n   * Checks if the status is dragging.\n   *\n   * @returns true if a drag operation is in progress\n   */\n  @derived\n  public get dragging(): boolean {\n    return this.value === StatusValue.Dragging;\n  }\n\n  /**\n   * Checks if the status is dropped.\n   *\n   * @returns true if a drag operation has completed\n   */\n  @derived\n  public get dropped(): boolean {\n    return this.value === StatusValue.Dropped;\n  }\n\n  /**\n   * Sets the current status value.\n   *\n   * @param value - The new status value\n   */\n  public set(value: StatusValue) {\n    this.value = value;\n  }\n}\n","import type {Coordinates} from '@dnd-kit/geometry';\nimport {batch, effect, untracked} from '@dnd-kit/state';\n\nimport type {\n  Draggable,\n  Droppable,\n  UniqueIdentifier,\n} from '../entities/index.ts';\n\nimport type {DragDropManager} from './manager.ts';\nimport {defaultPreventable} from './events.ts';\nimport {StatusValue} from './status.ts';\n\n/**\n * Provides actions for controlling drag and drop operations.\n *\n * @template T - The type of draggable entities\n * @template U - The type of droppable entities\n * @template V - The type of drag and drop manager\n */\nexport class DragActions<\n  T extends Draggable,\n  U extends Droppable,\n  V extends DragDropManager<T, U>,\n> {\n  /**\n   * Creates a new instance of drag actions.\n   *\n   * @param manager - The drag and drop manager instance\n   */\n  constructor(private readonly manager: V) {}\n\n  /**\n   * Sets the source of the drag operation.\n   *\n   * @param source - The draggable entity or its unique identifier\n   */\n  setDragSource(source: T | UniqueIdentifier) {\n    const {dragOperation} = this.manager;\n    dragOperation.sourceIdentifier =\n      typeof source === 'string' || typeof source === 'number'\n        ? source\n        : source.id;\n  }\n\n  /**\n   * Sets the target of the drop operation.\n   *\n   * @param identifier - The unique identifier of the droppable entity or null/undefined\n   * @returns A promise that resolves to true if the drop was prevented\n   */\n  setDropTarget(\n    identifier: UniqueIdentifier | null | undefined\n  ): Promise<boolean> {\n    return untracked(() => {\n      const {dragOperation} = this.manager;\n      const id = identifier ?? null;\n\n      if (dragOperation.targetIdentifier === id) {\n        return Promise.resolve(false);\n      }\n\n      dragOperation.targetIdentifier = id;\n\n      const event = defaultPreventable({\n        operation: dragOperation.snapshot(),\n      });\n\n      if (dragOperation.status.dragging) {\n        this.manager.monitor.dispatch('dragover', event);\n      }\n\n      return this.manager.renderer.rendering.then(() => event.defaultPrevented);\n    });\n  }\n\n  /**\n   * Starts a new drag operation.\n   *\n   * @param args - Configuration for the drag operation\n   * @param args.event - The event that initiated the drag\n   * @param args.source - The source draggable entity or its identifier\n   * @param args.coordinates - The initial coordinates of the drag\n   * @returns true if the drag operation started successfully\n   * @throws {Error} If there is no drag source or another operation is active\n   */\n  start(args: {\n    /** The event that initiated the drag. */\n    event?: Event;\n    /** The source draggable entity or its identifier. */\n    source?: T | UniqueIdentifier;\n    /** The initial coordinates of the drag. */\n    coordinates: Coordinates;\n  }): AbortController {\n    return untracked(() => {\n      const {dragOperation} = this.manager;\n\n      if (args.source != null) {\n        this.setDragSource(args.source);\n      }\n\n      const sourceInstance = dragOperation.source;\n\n      if (!sourceInstance) {\n        throw new Error('Cannot start a drag operation without a drag source');\n      }\n\n      if (!dragOperation.status.idle) {\n        throw new Error(\n          'Cannot start a drag operation while another is active'\n        );\n      }\n\n      const controller = new AbortController();\n\n      const {event: nativeEvent, coordinates} = args;\n\n      batch(() => {\n        dragOperation.status.set(StatusValue.InitializationPending);\n        dragOperation.shape = null;\n        dragOperation.canceled = false;\n        dragOperation.activatorEvent = nativeEvent ?? null;\n        dragOperation.position.reset(coordinates);\n      });\n\n      const beforeStartEvent = defaultPreventable({\n        operation: dragOperation.snapshot(),\n      });\n\n      this.manager.monitor.dispatch('beforedragstart', beforeStartEvent);\n\n      if (beforeStartEvent.defaultPrevented) {\n        dragOperation.reset();\n        controller.abort();\n        return controller;\n      }\n\n      dragOperation.status.set(StatusValue.Initializing);\n      dragOperation.controller = controller;\n\n      this.manager.renderer.rendering.then(() => {\n        if (controller.signal.aborted) return;\n\n        const {status} = dragOperation;\n        if (status.current !== StatusValue.Initializing) return;\n\n        dragOperation.status.set(StatusValue.Dragging);\n\n        this.manager.monitor.dispatch('dragstart', {\n          nativeEvent,\n          operation: dragOperation.snapshot(),\n          cancelable: false,\n        });\n      });\n\n      return controller;\n    });\n  }\n\n  /**\n   * Moves the dragged entity to a new position.\n   *\n   * @param args - Configuration for the move operation\n   * @param args.by - Relative coordinates to move by\n   * @param args.to - Absolute coordinates to move to\n   * @param args.event - The event that triggered the move\n   * @param args.cancelable - Whether the move can be canceled\n   * @param args.propagate - Whether to dispatch dragmove events\n   */\n  move(args: {\n    /** The relative coordinates to move by. */\n    by?: Coordinates;\n    /** The absolute coordinates to move to. */\n    to?: Coordinates;\n    /** The event that triggered the move. */\n    event?: Event;\n    /** Whether the move can be canceled. */\n    cancelable?: boolean;\n    /** Whether to propagate the dragmove event to the manager. */\n    propagate?: boolean;\n  }): void {\n    return untracked(() => {\n      const {dragOperation} = this.manager;\n      const {status, controller} = dragOperation;\n\n      if (!status.dragging || !controller || controller.signal.aborted) {\n        return;\n      }\n\n      const event = defaultPreventable(\n        {\n          nativeEvent: args.event,\n          operation: dragOperation.snapshot(),\n          by: args.by,\n          to: args.to,\n        },\n        args.cancelable ?? true\n      );\n\n      if (args.propagate ?? true) {\n        this.manager.monitor.dispatch('dragmove', event);\n      }\n\n      queueMicrotask(() => {\n        if (event.defaultPrevented) {\n          return;\n        }\n\n        const coordinates = args.to ?? {\n          x: dragOperation.position.current.x + (args.by?.x ?? 0),\n          y: dragOperation.position.current.y + (args.by?.y ?? 0),\n        };\n\n        dragOperation.position.current = coordinates;\n      });\n    });\n  }\n\n  /**\n   * Stops the current drag operation.\n   *\n   * @param args - Configuration for stopping the operation\n   * @param args.event - The event that triggered the stop\n   * @param args.canceled - Whether the operation was canceled\n   * @remarks\n   * This method:\n   * - Dispatches a dragend event\n   * - Allows suspension of the operation\n   * - Handles cleanup of the operation state\n   */\n  stop(\n    args: {\n      /**\n       * The event that triggered the stop.\n       */\n      event?: Event;\n      /**\n       * Whether the operation was canceled.\n       *\n       * @default false\n       */\n      canceled?: boolean;\n    } = {}\n  ): void {\n    return untracked(() => {\n      const {dragOperation} = this.manager;\n      const {controller} = dragOperation;\n\n      if (!controller || controller.signal.aborted) return;\n\n      let promise: Promise<void> | undefined;\n      const suspend = () => {\n        const output = {\n          resume: () => {},\n          abort: () => {},\n        };\n\n        promise = new Promise<void>((resolve, reject) => {\n          output.resume = resolve;\n          output.abort = reject;\n        });\n\n        return output;\n      };\n\n      controller.abort();\n\n      const end = () => {\n        this.manager.renderer.rendering.then(() => {\n          dragOperation.status.set(StatusValue.Dropped);\n\n          const dropping = untracked(\n            () => dragOperation.source?.status === 'dropping'\n          );\n\n          const cleanup = () => {\n            if (dragOperation.controller === controller) {\n              dragOperation.controller = undefined;\n            }\n            dragOperation.reset();\n          };\n\n          if (dropping) {\n            const {source} = dragOperation;\n\n            // Wait until the source has finished dropping before resetting the operation\n            const dispose = effect(() => {\n              if (source?.status === 'idle') {\n                dispose();\n                cleanup();\n              }\n            });\n          } else {\n            this.manager.renderer.rendering.then(cleanup);\n          }\n        });\n      };\n\n      dragOperation.canceled = args.canceled ?? false;\n\n      this.manager.monitor.dispatch('dragend', {\n        nativeEvent: args.event,\n        operation: dragOperation.snapshot(),\n        canceled: args.canceled ?? false,\n        suspend,\n      });\n\n      if (promise) {\n        promise.then(end).catch(() => dragOperation.reset());\n      } else {\n        end();\n      }\n    });\n  }\n}\n","import {CleanupFunction, reactive, type Effect} from '@dnd-kit/state';\n\nimport {DragDropManager} from '../../manager/index.ts';\nimport type {Data, UniqueIdentifier} from './types.ts';\n\nexport interface Input<T extends Data = Data> {\n  /**\n   * The unique identifier of the entity.\n   */\n  id: UniqueIdentifier;\n  /**\n   * Optional data associated with the entity.\n   */\n  data?: T;\n  /**\n   * Whether the entity should initially be disabled.\n   * @default false\n   */\n  disabled?: boolean;\n  /**\n   * Whether the entity should be automatically registered with the manager when it is created.\n   * @default true\n   */\n  register?: boolean;\n  /**\n   * An array of effects that are set up when the entity is registered and cleaned up when it is unregistered.\n   */\n  effects?(): Effect[];\n}\n\n/**\n * The `Entity` class is an abstract representation of a distinct unit in the drag and drop system.\n * It is a base class that other concrete classes like `Draggable` and `Droppable` can extend.\n *\n * @template T - The type of data associated with the entity.\n */\nexport class Entity<\n  T extends Data = Data,\n  U extends DragDropManager<any, any> = DragDropManager<any, any>,\n> {\n  /**\n   * Creates a new instance of the `Entity` class.\n   *\n   * @param input - An object containing the initial properties of the entity.\n   * @param manager - The manager that controls the drag and drop operations.\n   */\n  constructor(input: Input<T>, manager: U | undefined) {\n    const {effects, id, data = {}, disabled = false, register = true} = input;\n\n    let previousId = id;\n\n    this.manager = manager;\n    this.id = id;\n    this.data = data;\n    this.disabled = disabled;\n    this.effects = () => [\n      () => {\n        // Re-run this effect whenever the `id` changes\n        const {id, manager} = this;\n\n        if (id === previousId) {\n          return;\n        }\n\n        manager?.registry.register(this);\n\n        return () => manager?.registry.unregister(this);\n      },\n      ...(effects?.() ?? []),\n    ];\n\n    this.register = this.register.bind(this);\n    this.unregister = this.unregister.bind(this);\n    this.destroy = this.destroy.bind(this);\n\n    if (manager && register) {\n      queueMicrotask(this.register);\n    }\n  }\n\n  /**\n   * The manager that controls the drag and drop operations.\n   */\n  @reactive\n  public accessor manager: U | undefined;\n\n  /**\n   * The unique identifier of the entity.\n   */\n  @reactive\n  public accessor id: UniqueIdentifier;\n\n  /**\n   * The data associated with the entity.\n   */\n  @reactive\n  public accessor data: Data;\n\n  /**\n   * A boolean indicating whether the entity is disabled.\n   */\n  @reactive\n  public accessor disabled: boolean;\n\n  /**\n   * An array of effects that are applied to the entity.\n   */\n  public effects: () => Effect[];\n\n  /**\n   * A method that registers the entity with the manager.\n   * @returns CleanupFunction | void\n   */\n  public register(): CleanupFunction | void {\n    return this.manager?.registry.register(this);\n  }\n\n  /**\n   * A method that unregisters the entity from the manager.\n   * @returns void\n   */\n  public unregister(): void {\n    this.manager?.registry.unregister(this);\n  }\n\n  /**\n   * A method that cleans up the entity when it is no longer needed.\n   * @returns void\n   */\n  public destroy(): void {\n    this.manager?.registry.unregister(this);\n  }\n}\n","import {effects, signal} from '@dnd-kit/state';\n\nimport type {Entity} from './entity.ts';\nimport type {UniqueIdentifier} from './types.ts';\n\n/**\n * Reactive class representing a registry for entities.\n * @template T - The type of entries that the registry manages,\n * for example, `Draggable` or `Droppable` entities.\n */\nexport class EntityRegistry<T extends Entity> {\n  private map = signal<Map<UniqueIdentifier, T>>(new Map());\n  private cleanupFunctions = new WeakMap<T, () => void>();\n\n  /**\n   * Iterator for the EntityRegistry class.\n   * @returns An iterator for the values in the map.\n   */\n  public [Symbol.iterator]() {\n    return this.map.peek().values();\n  }\n\n  public get value() {\n    return this.map.value.values();\n  }\n\n  /**\n   * Checks if a entity with the given identifier exists in the registry.\n   * @param identifier - The unique identifier of the entity.\n   * @returns True if the entity exists, false otherwise.\n   */\n  public has(identifier: UniqueIdentifier): boolean {\n    return this.map.value.has(identifier);\n  }\n\n  /**\n   * Retrieves a entity from the registry using its identifier.\n   * @param identifier - The unique identifier of the entity.\n   * @returns The entity if it exists, undefined otherwise.\n   */\n  public get(identifier: UniqueIdentifier): T | undefined {\n    return this.map.value.get(identifier);\n  }\n\n  /**\n   * Registers a entity in the registry.\n   * @param key - The unique identifier of the entity.\n   * @param value - The entity to register.\n   * @returns A function that unregisters the entity.\n   */\n  public register = (key: UniqueIdentifier, value: T) => {\n    const current = this.map.peek();\n    const currentValue = current.get(key);\n    const unregister = () => this.unregister(key, value);\n\n    if (currentValue === value) return unregister;\n\n    if (currentValue) {\n      const cleanup = this.cleanupFunctions.get(currentValue);\n      cleanup?.();\n      this.cleanupFunctions.delete(currentValue);\n    }\n\n    const updatedMap = new Map(current);\n    updatedMap.set(key, value);\n\n    this.map.value = updatedMap;\n\n    const cleanup = effects(...value.effects());\n    this.cleanupFunctions.set(value, cleanup);\n\n    return unregister;\n  };\n\n  /**\n   * Unregisters an entity from the registry.\n   * @param key - The unique identifier of the entity.\n   * @param value - The entity instance to unregister.\n   */\n  public unregister = (key: UniqueIdentifier, value: T) => {\n    const current = this.map.peek();\n\n    if (current.get(key) !== value) {\n      return;\n    }\n\n    const cleanup = this.cleanupFunctions.get(value);\n    cleanup?.();\n    this.cleanupFunctions.delete(value);\n\n    const updatedMap = new Map(current);\n    updatedMap.delete(key);\n\n    this.map.value = updatedMap;\n  };\n\n  /**\n   * Destroys all entries in the registry and clears the registry.\n   */\n  public destroy() {\n    for (const entry of this) {\n      const cleanup = this.cleanupFunctions.get(entry);\n      cleanup?.();\n      entry.destroy();\n    }\n\n    this.map.value = new Map();\n  }\n}\n","import {derived, reactive} from '@dnd-kit/state';\nimport type {Alignment} from '@dnd-kit/geometry';\n\nimport {Entity} from '../entity/index.ts';\nimport type {EntityInput, Data, Type} from '../entity/index.ts';\nimport type {Modifiers} from '../../modifiers/index.ts';\nimport type {DragDropManager} from '../../manager/index.ts';\nimport type {Sensors} from '../../sensors/sensor.ts';\n\n/**\n * Input configuration for creating a draggable entity.\n *\n * @template T - The type of data associated with the draggable\n *\n * @remarks\n * Extends the base entity input with draggable-specific configuration:\n * - Type for categorization\n * - Sensors for handling drag interactions\n * - Modifiers for transforming drag behavior\n * - Alignment for positioning\n */\nexport interface Input<T extends Data = Data> extends EntityInput<T> {\n  type?: Type;\n  sensors?: Sensors;\n  modifiers?: Modifiers;\n  alignment?: Alignment;\n}\n\n/**\n * Possible status values for a draggable entity.\n *\n * @remarks\n * - idle: Not being dragged\n * - dragging: Currently being dragged\n * - dropping: Currently being dropped\n */\nexport type DraggableStatus = 'idle' | 'dragging' | 'dropping';\n\n/**\n * Represents an entity that can be dragged in a drag and drop operation.\n *\n * @template T - The type of data associated with the draggable\n * @template U - The type of drag and drop manager\n *\n * @remarks\n * This class extends the base Entity class with draggable-specific functionality:\n * - Type-based categorization\n * - Sensor-based interaction handling\n * - Modifier-based behavior transformation\n * - Status tracking during drag operations\n */\nexport class Draggable<\n  T extends Data = Data,\n  U extends DragDropManager<any, any> = DragDropManager<any, any>,\n> extends Entity<T, U> {\n  constructor(\n    {modifiers, type, sensors, ...input}: Input<T>,\n    manager: U | undefined\n  ) {\n    super(input, manager);\n\n    this.type = type;\n    this.sensors = sensors;\n    this.modifiers = modifiers;\n    this.alignment = input.alignment;\n  }\n\n  /** The type of the draggable entity */\n  @reactive\n  public accessor type: Type | undefined;\n\n  /** The sensors associated with the draggable entity */\n  public sensors: Sensors | undefined;\n\n  /** The modifiers associated with the draggable entity */\n  @reactive\n  public accessor modifiers: Modifiers | undefined;\n\n  /** The alignment of the draggable entity */\n  public alignment: Alignment | undefined;\n\n  /** The current status of the draggable entity */\n  @reactive\n  public accessor status: DraggableStatus = this.isDragSource\n    ? 'dragging'\n    : 'idle';\n\n  /**\n   * Checks if the draggable entity is currently being dropped.\n   *\n   * @returns true if the entity is being dropped and is the drag source\n   */\n  @derived\n  public get isDropping() {\n    return this.status === 'dropping' && this.isDragSource;\n  }\n\n  /**\n   * Checks if the draggable entity is currently being dragged.\n   *\n   * @returns true if the entity is being dragged and is the drag source\n   */\n  @derived\n  public get isDragging() {\n    return this.status === 'dragging' && this.isDragSource;\n  }\n\n  /**\n   * Checks if the draggable entity is the source of the current drag operation.\n   *\n   * @returns true if the entity's ID matches the current drag operation's source ID\n   */\n  @derived\n  public get isDragSource() {\n    return this.manager?.dragOperation.source?.id === this.id;\n  }\n}\n","import {derived, effects, reactive, type Effect} from '@dnd-kit/state';\nimport type {Shape} from '@dnd-kit/geometry';\n\nimport {Entity} from '../entity/index.ts';\nimport type {EntityInput, Data, Type} from '../entity/index.ts';\nimport {\n  CollisionPriority,\n  type CollisionDetector,\n} from '../../collision/index.ts';\nimport type {DragDropManager} from '../../manager/index.ts';\nimport {Draggable} from '../draggable/draggable.ts';\n\n/**\n * Input configuration for creating a droppable entity.\n *\n * @template T - The type of data associated with the droppable\n *\n * @remarks\n * Extends the base entity input with droppable-specific configuration:\n * - Accept rules for determining compatible draggables\n * - Collision detection configuration\n * - Type for categorization\n */\nexport interface Input<T extends Data = Data> extends EntityInput<T> {\n  /** Types of draggables that can be dropped here, or a function to determine compatibility */\n  accept?: Type | Type[] | ((source: Draggable) => boolean);\n  /** Priority for collision detection */\n  collisionPriority?: CollisionPriority | number;\n  /** Detector for determining collisions with draggables */\n  collisionDetector: CollisionDetector;\n  /** Type for categorization */\n  type?: Type;\n}\n\n/**\n * Represents an entity that can receive draggable items in a drag and drop operation.\n *\n * @template T - The type of data associated with the droppable\n * @template U - The type of drag and drop manager\n *\n * @remarks\n * This class extends the base Entity class with droppable-specific functionality:\n * - Type-based acceptance rules\n * - Collision detection\n * - Shape tracking\n * - Target status tracking\n */\nexport class Droppable<\n  T extends Data = Data,\n  U extends DragDropManager<any, any> = DragDropManager<any, any>,\n> extends Entity<T, U> {\n  constructor(\n    {accept, collisionDetector, collisionPriority, type, ...input}: Input<T>,\n    manager: U | undefined\n  ) {\n    super(input, manager);\n\n    this.accept = accept;\n    this.collisionDetector = collisionDetector;\n    this.collisionPriority = collisionPriority;\n    this.type = type;\n  }\n\n  /**\n   * Types of draggables that can be dropped here, or a function to determine compatibility.\n   *\n   * @remarks\n   * If undefined, all draggables are accepted.\n   * If a function, it determines compatibility based on the draggable.\n   * If a type or array of types, only draggables of matching types are accepted.\n   */\n  @reactive\n  public accessor accept:\n    | Type\n    | Type[]\n    | ((draggable: Draggable) => boolean)\n    | undefined;\n\n  /** The type of the droppable entity */\n  @reactive\n  public accessor type: Type | undefined;\n\n  /**\n   * Checks whether or not the droppable accepts a given draggable.\n   *\n   * @param draggable - The draggable to check\n   * @returns true if the draggable can be dropped here\n   */\n  public accepts(draggable: Draggable): boolean {\n    const {accept} = this;\n\n    if (!accept) {\n      return true;\n    }\n\n    if (typeof accept === 'function') {\n      return accept(draggable);\n    }\n\n    if (!draggable.type) {\n      return false;\n    }\n\n    if (Array.isArray(accept)) {\n      return accept.includes(draggable.type);\n    }\n\n    return draggable.type === accept;\n  }\n\n  /** The collision detector for this droppable */\n  @reactive\n  public accessor collisionDetector: CollisionDetector;\n\n  /** The collision priority for this droppable */\n  @reactive\n  public accessor collisionPriority: CollisionPriority | number | undefined;\n\n  /** The current shape of this droppable */\n  @reactive\n  public accessor shape: Shape | undefined;\n\n  /**\n   * Checks if this droppable is the current drop target.\n   *\n   * @returns true if this droppable's ID matches the current drag operation's target ID\n   */\n  @derived\n  public get isDropTarget() {\n    return this.manager?.dragOperation.target?.id === this.id;\n  }\n}\n","import {CleanupFunction} from '@dnd-kit/state';\n\nimport type {DragDropManager} from '../manager/index.ts';\nimport type {Draggable, Droppable} from '../entities/index.ts';\nimport {\n  Plugin,\n  type PluginConstructor,\n  type PluginDescriptor,\n  type PluginOptions,\n} from '../plugins/index.ts';\n\n/**\n * Options that can be passed to a sensor.\n * Extends the base PluginOptions type.\n */\nexport type SensorOptions = PluginOptions;\n\n/**\n * Abstract base class for all sensor implementations.\n *\n * @template T - The type of drag drop manager\n * @template U - The type of sensor options\n *\n * @remarks\n * Sensors are responsible for detecting and initiating drag operations.\n * They handle the actual user interaction (mouse, touch, keyboard, etc.)\n * and translate those interactions into drag operations.\n */\nexport abstract class Sensor<\n  T extends DragDropManager<any, any> = DragDropManager<Draggable, Droppable>,\n  U extends SensorOptions = SensorOptions,\n> extends Plugin<T, U> {\n  /**\n   * Creates a new sensor instance.\n   *\n   * @param manager - The drag drop manager instance\n   * @param options - Optional sensor configuration\n   */\n  constructor(\n    public manager: T,\n    public options?: U\n  ) {\n    super(manager, options);\n  }\n\n  /**\n   * Binds the sensor to a draggable source.\n   *\n   * @param source - The draggable element to bind to\n   * @param options - Optional sensor options specific to this draggable\n   * @returns A cleanup function to unbind the sensor\n   */\n  public abstract bind(source: Draggable, options?: U): CleanupFunction;\n}\n\n/**\n * Constructor type for creating sensor instances.\n *\n * @template T - The type of drag drop manager\n */\nexport type SensorConstructor<\n  T extends DragDropManager<any, any> = DragDropManager<any, any>,\n> = PluginConstructor<T, Sensor<T>>;\n\n/**\n * Descriptor type for configuring sensors.\n *\n * @template T - The type of drag drop manager\n */\nexport type SensorDescriptor<\n  T extends DragDropManager<any, any> = DragDropManager<any, any>,\n> = PluginDescriptor<T, Sensor<T>, SensorConstructor<T>>;\n\n/**\n * Array type for multiple sensor configurations.\n *\n * @template T - The type of drag drop manager\n */\nexport type Sensors<\n  T extends DragDropManager<any, any> = DragDropManager<any, any>,\n> = (SensorConstructor<T> | SensorDescriptor<T>)[];\n","import type {Coordinates} from '@dnd-kit/geometry';\n\nimport {\n  Plugin,\n  type PluginOptions,\n  type PluginConstructor,\n  type PluginDescriptor,\n} from '../plugins/index.ts';\nimport type {DragDropManager} from '../manager/manager.ts';\nimport type {DragOperationSnapshot} from '../manager/operation.ts';\n\n/** Options that can be passed to a modifier */\nexport type ModifierOptions = PluginOptions;\n\n/**\n * Base class for drag operation modifiers.\n *\n * @template T - The type of drag and drop manager\n * @template U - The type of modifier options\n *\n * @remarks\n * Modifiers can transform the coordinates of a drag operation,\n * enabling features like snapping, constraints, and custom behaviors.\n */\nexport class Modifier<\n  T extends DragDropManager<any, any> = DragDropManager<any, any>,\n  U extends ModifierOptions = ModifierOptions,\n> extends Plugin<T, U> {\n  /**\n   * Creates a new modifier instance.\n   *\n   * @param manager - The drag and drop manager that owns this modifier\n   * @param options - Optional configuration for the modifier\n   */\n  constructor(\n    public manager: T,\n    public options?: U\n  ) {\n    super(manager, options);\n  }\n\n  /**\n   * Applies the modifier to the current drag operation.\n   *\n   * @param operation - The current state of the drag operation\n   * @returns The transformed coordinates\n   *\n   * @remarks\n   * Override this method to implement custom transformation logic.\n   * The default implementation returns the original transform unchanged.\n   */\n  public apply(operation: DragOperationSnapshot<any, any>): Coordinates {\n    return operation.transform;\n  }\n}\n\n/**\n * Constructor type for modifiers.\n *\n * @template T - The type of drag and drop manager\n */\nexport type ModifierConstructor<\n  T extends DragDropManager<any, any> = DragDropManager<any, any>,\n> = PluginConstructor<T, Modifier<T, any>>;\n\n/**\n * Descriptor type for modifiers.\n *\n * @template T - The type of drag and drop manager\n */\nexport type ModifierDescriptor<\n  T extends DragDropManager<any, any> = DragDropManager<any, any>,\n> = PluginDescriptor<T, Modifier<T, any>, ModifierConstructor<T>>;\n\n/**\n * Array type for modifier constructors or descriptors.\n *\n * @template T - The type of drag and drop manager\n */\nexport type Modifiers<\n  T extends DragDropManager<any, any> = DragDropManager<any, any>,\n> = (ModifierConstructor<T> | ModifierDescriptor<T>)[];\n","import type {CleanupFunction} from '@dnd-kit/state';\n\nimport {\n  Draggable,\n  Droppable,\n  Entity,\n  EntityRegistry,\n} from '../entities/index.ts';\nimport {\n  PluginRegistry,\n  Plugin,\n  type PluginConstructor,\n  PluginOptions,\n} from '../plugins/index.ts';\nimport {\n  Sensor,\n  SensorOptions,\n  type SensorConstructor,\n} from '../sensors/index.ts';\nimport {Modifier, type ModifierConstructor} from '../modifiers/index.ts';\nimport type {DragDropManager} from './manager.ts';\n\n/**\n * Manages the registration and lifecycle of draggable and droppable entities,\n * as well as plugins, sensors, and modifiers.\n *\n * @template T - The type of draggable entities\n * @template U - The type of droppable entities\n * @template V - The type of drag and drop manager\n */\nexport class DragDropRegistry<\n  T extends Draggable,\n  U extends Droppable,\n  V extends DragDropManager<T, U>,\n> {\n  /**\n   * Creates a new registry instance.\n   *\n   * @param manager - The drag and drop manager that owns this registry\n   */\n  constructor(manager: V) {\n    this.plugins = new PluginRegistry<V, PluginConstructor<V>>(manager);\n    this.sensors = new PluginRegistry<V, SensorConstructor<V>>(manager);\n    this.modifiers = new PluginRegistry<V, ModifierConstructor<V>>(manager);\n  }\n\n  /** Registry for draggable entities */\n  public draggables = new EntityRegistry<T>();\n\n  /** Registry for droppable entities */\n  public droppables = new EntityRegistry<U>();\n\n  /** Registry for plugins */\n  public plugins: PluginRegistry<V, PluginConstructor<V>>;\n\n  /** Registry for sensors */\n  public sensors: PluginRegistry<V, SensorConstructor<V>>;\n\n  /** Registry for modifiers */\n  public modifiers: PluginRegistry<V, ModifierConstructor<V>>;\n\n  /**\n   * Registers a new entity, plugin, sensor, or modifier.\n   *\n   * @param input - The entity, plugin constructor, sensor constructor, or modifier constructor to register\n   * @param options - Optional configuration for plugins and sensors\n   * @returns A cleanup function or the registered instance\n   * @throws {Error} If the input type is invalid\n   */\n  public register(input: Entity): () => void;\n  public register(input: Draggable): () => void;\n  public register(input: Droppable): () => void;\n  public register(input: SensorConstructor, options?: SensorOptions): Sensor;\n  public register(input: ModifierConstructor): Modifier;\n  public register(input: PluginConstructor, options?: PluginOptions): Plugin;\n  public register(input: any, options?: Record<string, any>) {\n    if (input instanceof Draggable) {\n      return this.draggables.register(input.id, input as T);\n    }\n\n    if (input instanceof Droppable) {\n      return this.droppables.register(input.id, input as U);\n    }\n\n    if (input.prototype instanceof Modifier) {\n      return this.modifiers.register(input, options);\n    }\n\n    if (input.prototype instanceof Sensor) {\n      return this.sensors.register(input, options);\n    }\n\n    if (input.prototype instanceof Plugin) {\n      return this.plugins.register(input, options);\n    }\n\n    throw new Error('Invalid instance type');\n  }\n\n  /**\n   * Unregisters an entity, plugin, sensor, or modifier.\n   *\n   * @param input - The entity, plugin constructor, sensor constructor, or modifier constructor to unregister\n   * @returns A cleanup function\n   * @throws {Error} If the input type is invalid\n   */\n  public unregister(input: Entity): CleanupFunction;\n  public unregister(input: Draggable): CleanupFunction;\n  public unregister(input: Droppable): CleanupFunction;\n  public unregister(input: SensorConstructor): CleanupFunction;\n  public unregister(input: ModifierConstructor): CleanupFunction;\n  public unregister(input: PluginConstructor): CleanupFunction;\n  public unregister(input: any) {\n    if (input instanceof Entity) {\n      if (input instanceof Draggable) {\n        return this.draggables.unregister(input.id, input as T);\n      }\n\n      if (input instanceof Droppable) {\n        return this.droppables.unregister(input.id, input as U);\n      }\n\n      // no-op\n      return () => {};\n    }\n\n    if (input.prototype instanceof Modifier) {\n      return this.modifiers.unregister(input);\n    }\n\n    if (input.prototype instanceof Sensor) {\n      return this.sensors.unregister(input);\n    }\n\n    if (input.prototype instanceof Plugin) {\n      return this.plugins.unregister(input);\n    }\n\n    throw new Error('Invalid instance type');\n  }\n\n  /**\n   * Destroys all registered entities and cleans up resources.\n   *\n   * @remarks\n   * This method:\n   * - Destroys all draggable and droppable entities\n   * - Destroys all plugins, sensors, and modifiers\n   * - Cleans up any associated resources\n   */\n  destroy() {\n    this.draggables.destroy();\n    this.droppables.destroy();\n    this.plugins.destroy();\n    this.sensors.destroy();\n    this.modifiers.destroy();\n  }\n}\n","import {Position, type Shape} from '@dnd-kit/geometry';\nimport type {Coordinates} from '@dnd-kit/geometry';\nimport {\n  batch,\n  derived,\n  reactive,\n  snapshot,\n  untracked,\n  ValueHistory,\n  type WithHistory,\n} from '@dnd-kit/state';\n\nimport type {\n  Draggable,\n  Droppable,\n  UniqueIdentifier,\n} from '../entities/index.ts';\nimport type {Modifier} from '../modifiers/index.ts';\n\nimport type {DragDropManager} from './manager.ts';\nimport {Status, StatusValue} from './status.ts';\n\nexport interface DragOperationSnapshot<\n  T extends Draggable = Draggable,\n  U extends Droppable = Droppable,\n> {\n  readonly activatorEvent: Event | null;\n  readonly canceled: boolean;\n  readonly position: Position;\n  readonly transform: Coordinates;\n  readonly status: Status;\n  get shape(): WithHistory<Shape> | null;\n  set shape(value: Shape | null);\n  readonly source: T | null;\n  readonly target: U | null;\n}\n\n/**\n * Represents the current state of a drag operation.\n *\n * @template T - The type of draggable entities\n * @template U - The type of droppable entities\n */\nexport class DragOperation<T extends Draggable, U extends Droppable>\n  implements DragOperationSnapshot<T, U>\n{\n  /**\n   * Creates a new drag operation instance.\n   *\n   * @param manager - The drag and drop manager that owns this operation\n   */\n  constructor(manager: DragDropManager<T, U>) {\n    this.#manager = manager;\n  }\n\n  #manager: DragDropManager<T, U>;\n\n  #previousSource?: T;\n\n  #shape = new ValueHistory<Shape | undefined>(undefined, (a, b) =>\n    a && b ? a.equals(b) : a === b\n  );\n\n  /** Current status of the drag operation */\n  public readonly status = new Status();\n\n  /** The controller for the currentdrag operation */\n  public controller: AbortController | undefined;\n\n  /**\n   * Gets the current shape of the dragged entity with history.\n   *\n   * @returns The shape history or null if no shape is set\n   */\n  @derived\n  public get shape(): WithHistory<Shape> | null {\n    const {current, initial, previous} = this.#shape;\n\n    if (!current || !initial) {\n      return null;\n    }\n\n    return {current, initial, previous};\n  }\n\n  /**\n   * Sets the shape of the dragged entity.\n   *\n   * @param value - The new shape or null to reset\n   */\n  public set shape(value: Shape | null) {\n    if (!value) {\n      this.#shape.reset();\n    } else {\n      this.#shape.current = value;\n    }\n  }\n\n  /** Whether the drag operation was canceled */\n  @reactive\n  public accessor canceled = false;\n\n  /** The event that initiated the drag operation */\n  @reactive\n  public accessor activatorEvent: Event | null = null;\n\n  /** Unique identifier of the source draggable entity */\n  @reactive\n  public accessor sourceIdentifier: UniqueIdentifier | null = null;\n\n  /** Unique identifier of the target droppable entity */\n  @reactive\n  public accessor targetIdentifier: UniqueIdentifier | null = null;\n\n  /** List of modifiers applied to the drag operation */\n  @reactive\n  public accessor modifiers: Modifier[] = [];\n\n  /** Current position of the dragged entity */\n  public position = new Position({x: 0, y: 0});\n\n  /**\n   * Gets the source draggable entity.\n   *\n   * @returns The current draggable entity or the previous one if the current is not found\n   */\n  @derived\n  public get source(): T | null {\n    const identifier = this.sourceIdentifier;\n    if (identifier == null) return null;\n\n    const value = this.#manager.registry.draggables.get(identifier);\n\n    if (value) {\n      this.#previousSource = value;\n    }\n\n    return value ?? this.#previousSource ?? null;\n  }\n\n  /**\n   * Gets the target droppable entity.\n   *\n   * @returns The current droppable entity or null if not found\n   */\n  @derived\n  public get target(): U | null {\n    const identifier = this.targetIdentifier;\n    return identifier != null\n      ? (this.#manager.registry.droppables.get(identifier) ?? null)\n      : null;\n  }\n\n  #transform = {x: 0, y: 0};\n\n  /**\n   * Gets the current transform after applying all modifiers.\n   *\n   * @returns The transformed coordinates\n   */\n  @derived\n  public get transform() {\n    const {x, y} = this.position.delta;\n    let transform = {x, y};\n\n    for (const modifier of this.modifiers) {\n      transform = modifier.apply({\n        ...this.snapshot(),\n        transform,\n      });\n    }\n\n    this.#transform = transform;\n\n    return transform;\n  }\n\n  /**\n   * Creates a snapshot of the current drag operation state.\n   *\n   * @returns An immutable snapshot of the current operation state\n   */\n  public snapshot(): DragOperationSnapshot<T, U> {\n    return untracked(() => ({\n      source: this.source,\n      target: this.target,\n      activatorEvent: this.activatorEvent,\n      transform: this.#transform,\n      shape: this.shape ? snapshot(this.shape) : null,\n      position: snapshot(this.position),\n      status: snapshot(this.status),\n      canceled: this.canceled,\n    }));\n  }\n\n  /**\n   * Resets the drag operation to its initial state.\n   *\n   * @remarks\n   * This method:\n   * - Sets status to idle\n   * - Clears source and target identifiers\n   * - Resets shape history\n   * - Resets position and transform\n   * - Clears modifiers\n   */\n  public reset() {\n    batch(() => {\n      this.status.set(StatusValue.Idle);\n      this.sourceIdentifier = null;\n      this.targetIdentifier = null;\n      this.#shape.reset();\n      this.position.reset({x: 0, y: 0});\n      this.#transform = {x: 0, y: 0};\n      this.modifiers = [];\n    });\n  }\n}\n","/**\n * Interface for handling visual feedback during drag operations.\n *\n * @remarks\n * Implementations of this interface are responsible for managing\n * the visual state of dragged elements and ensuring smooth animations.\n */\nexport interface Renderer {\n  /**\n   * Gets a promise that resolves when the current rendering operation is complete.\n   *\n   * @returns A promise that resolves when rendering is finished\n   */\n  get rendering(): Promise<void>;\n}\n\n/**\n * Default renderer implementation.\n *\n * @remarks\n * This implementation immediately resolves rendering promises,\n * making it suitable for environments where custom rendering\n * is not required or handled externally.\n */\nexport const defaultRenderer: Renderer = {\n  get rendering() {\n    return Promise.resolve();\n  },\n};\n","import {effects, untracked} from '@dnd-kit/state';\n\nimport type {Draggable, Droppable} from '../entities/index.ts';\nimport {CollisionObserver, CollisionNotifier} from '../collision/index.ts';\nimport type {Plugins, Plugin} from '../plugins/index.ts';\nimport type {Sensor, Sensors} from '../sensors/index.ts';\nimport type {Modifier, Modifiers} from '../modifiers/index.ts';\nimport {descriptor} from '../plugins/utilities.ts';\n\nimport {DragActions} from './actions.ts';\nimport {DragDropRegistry} from './registry.ts';\nimport {DragOperation} from './operation.ts';\nimport {DragDropMonitor} from './events.ts';\nimport {defaultRenderer, type Renderer} from './renderer.ts';\n\nexport type DragDropManagerInput<T extends DragDropManager<any, any>> = {\n  plugins?: Plugins<T>;\n  sensors?: Sensors<T>;\n  modifiers?: Modifiers<T>;\n  renderer?: Renderer;\n};\n\n/**\n * Central manager class that orchestrates drag and drop operations.\n *\n * @template T - The type of draggable entities\n * @template U - The type of droppable entities\n */\nexport class DragDropManager<T extends Draggable, U extends Droppable> {\n  /** Actions that can be performed during drag operations */\n  public actions: DragActions<T, U, DragDropManager<T, U>>;\n\n  /** Observes and manages collision detection between draggable and droppable entities */\n  public collisionObserver: CollisionObserver<T, U>;\n\n  /** Tracks the current drag operation state and metadata */\n  public dragOperation: DragOperation<T, U>;\n\n  /** Monitors and emits drag and drop events */\n  public monitor: DragDropMonitor<T, U, DragDropManager<T, U>>;\n\n  /** Registry that manages draggable and droppable entities */\n  public registry: DragDropRegistry<T, U, DragDropManager<T, U>>;\n\n  /** Handles rendering of drag and drop visual feedback */\n  public renderer: Renderer;\n\n  /**\n   * Creates a new drag and drop manager instance.\n   *\n   * @param config - Optional configuration for plugins, sensors, modifiers, and renderer\n   */\n  constructor(config?: DragDropManagerInput<any>) {\n    type V = DragDropManager<T, U>;\n\n    const {\n      plugins = [],\n      sensors = [],\n      modifiers = [],\n      renderer = defaultRenderer,\n    } = config ?? {};\n    const monitor = new DragDropMonitor<T, U, V>(this);\n    const registry = new DragDropRegistry<T, U, V>(this);\n\n    this.registry = registry;\n    this.monitor = monitor;\n    this.renderer = renderer;\n\n    this.actions = new DragActions<T, U, V>(this);\n    this.dragOperation = new DragOperation<T, U>(this);\n    this.collisionObserver = new CollisionObserver<T, U, V>(this);\n    this.plugins = [CollisionNotifier, ...plugins];\n    this.modifiers = modifiers;\n    this.sensors = sensors;\n\n    const {destroy} = this;\n\n    const cleanup = effects(() => {\n      const currentModifiers = untracked(() => this.dragOperation.modifiers);\n      const managerModifiers = this.modifiers;\n\n      if (currentModifiers !== managerModifiers) {\n        currentModifiers.forEach((modifier) => modifier.destroy());\n      }\n\n      this.dragOperation.modifiers =\n        this.dragOperation.source?.modifiers?.map((modifier) => {\n          const {plugin, options} = descriptor(modifier);\n          return new plugin(this, options);\n        }) ?? managerModifiers;\n    });\n\n    this.destroy = () => {\n      cleanup();\n      destroy();\n    };\n  }\n\n  /**\n   * Gets the list of active plugins.\n   *\n   * @returns Array of active plugin instances\n   */\n  get plugins(): Plugin<any>[] {\n    return this.registry.plugins.values;\n  }\n\n  /**\n   * Sets the list of plugins to be used by the manager.\n   *\n   * @param plugins - Array of plugin constructors or instances\n   */\n  set plugins(plugins: Plugins<any>) {\n    this.registry.plugins.values = plugins;\n  }\n\n  /**\n   * Gets the list of active modifiers.\n   *\n   * @returns Array of active modifier instances\n   */\n  get modifiers(): Modifier<any>[] {\n    return this.registry.modifiers.values;\n  }\n\n  /**\n   * Sets the list of modifiers to be used by the manager.\n   *\n   * @param modifiers - Array of modifier constructors or instances\n   */\n  set modifiers(modifiers: Modifiers<any>) {\n    this.registry.modifiers.values = modifiers;\n  }\n\n  /**\n   * Gets the list of active sensors.\n   *\n   * @returns Array of active sensor instances\n   */\n  get sensors(): Sensor<any>[] {\n    return this.registry.sensors.values;\n  }\n\n  /**\n   * Sets the list of sensors to be used by the manager.\n   *\n   * @param sensors - Array of sensor constructors or instances\n   */\n  set sensors(sensors: Sensors<any>) {\n    this.registry.sensors.values = sensors;\n  }\n\n  /**\n   * Cleans up resources and stops any active drag operations.\n   */\n  public destroy = () => {\n    if (!this.dragOperation.status.idle) {\n      this.actions.stop({canceled: true});\n    }\n\n    this.dragOperation.modifiers.forEach((modifier) => modifier.destroy());\n\n    this.registry.destroy();\n    this.collisionObserver.destroy();\n  };\n}\n"]}